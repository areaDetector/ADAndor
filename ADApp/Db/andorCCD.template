# Database for the records specific to the Andor CCD.
# Matthew Pearson
# June 2009

# These are the records that we modify from NDFile.template
record(mbbo, "$(P)$(R)FileFormat")
{
   field(ZRST, "TIFF")
   field(ZRVL, "0")
   field(ONST, "BMP")
   field(ONVL, "1")
   field(TWST, "SIF")
   field(TWVL, "2")
   field(THST, "EDF")
   field(THVL, "3")
   field(FRST, "RAW")
   field(FRVL, "4")
   field(FVST, "TEXT")
   field(FVVL, "5")
}

# These are the records that we modify from NDFile.template
record(mbbi, "$(P)$(R)FileFormat_RBV")
{
   field(ZRST, "TIFF")
   field(ZRVL, "0")
   field(ONST, "BMP")
   field(ONVL, "1")
   field(TWST, "SIF")
   field(TWVL, "2")
   field(THST, "EDF")
   field(THVL, "3")
   field(FRST, "RAW")
   field(FRVL, "4")
   field(FVST, "TEXT")
   field(FVVL, "5")
}

# These are the records that are new for the Andor detector 
record(bo, "$(P)$(R)AndorCooler")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_COOLER")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(bi, "$(P)$(R)AndorCooler_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_COOLER")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)AndorShutdown")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_SHUTDOWN")
}

record(bo, "$(P)$(R)AndorStartup")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_STARTUP")
}

record(mbbo, "$(P)$(R)AndorImageMode")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_IMAGE_MODE_AM")
   field(ZRST, "Accumulate")
   field(ZRVL, "0")
   field(ONST, "Kinetics")
   field(ONVL, "1")
   field(TWST, "Fast Kinetics")
   field(TWVL, "2")
}

# Accumulated cycle time in kinetics mode. 
record(ao, "$(P)$(R)AndorACTInKinetics")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_ACT_KINETICS")
   field(PREC, "3")
   field(VAL, "0.0")
   
}

# Number of accumulations in kinetics mode.
record(longout, "$(P)$(R)AndorANumInKinetics")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_ANUM_KINETICS")
}

record(longout, "$(P)$(R)AndorFKHeight")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_FK_HEIGHT")
}

record(longout, "$(P)$(R)AndorFKHBinning")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_FKH_BINNING")
}

record(longout, "$(P)$(R)AndorFKVBinning")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_FKV_BINNING")
}

record(longout, "$(P)$(R)AndorFKOffset")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_FK_OFFSET")
}


# Status message concerning temperature.
record(waveform, "$(P)$(R)AndorTempStatus_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_TEMP_STAT")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# Status message not related to data acquisition (error messages, information messages, etc.)
record(waveform, "$(P)$(R)AndorMessage_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)AndorShutterMode")
{
    field(PINI, "1")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_SHUTTER_MODE")
    field(ZRST, "Auto")
    field(ZRVL, "0")
    field(ONST, "Open")
    field(ONVL, "1")
}

record(bo, "$(P)$(R)AndorShutterExTTL")
{
    field(PINI, "1")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_SHUTTER_EXTTL")
    field(ZNAM, "Low To Open")
    field(ONAM, "High To Open")
    field(RVAL, "1")
}


# Filename of the PAL file
record(waveform, "$(P)$(R)PALFilePath")
{
    field(PINI, "1")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_PAL_FILE_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(P)$(R)PALFilePath_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_PAL_FILE_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)AndorADCSpeed")
{
    field(PINI, "1")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_ADC_SPEED")
    field(ZRST, "0.05 MHz")
    field(ZRVL, "0")
    field(ONST, "2.5 MHz")
    field(ONVL, "1")
    field(VAL, "1")
}

#% archiver 10 Monitor
record(mbbi, "$(P)$(R)AndorADCSpeed_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ANDOR_ADC_SPEED")
   field(ZRST, "0.05 MHz")
   field(ZRVL, "0")
   field(ONST, "2.5 MHz")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}



#Records in ADBase that do not apply to Andor

record(mbbo, "$(P)$(R)DataType")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)DataType_RBV")
{
    field(DISA, "1")
}
record(mbbo, "$(P)$(R)ColorMode")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)ColorMode_RBV")
{
    field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseX")
{
    field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseX_RBV")
{
    field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseY")
{
    field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseY_RBV")
{
    field(DISA, "1")
}
record(ao, "$(P)$(R)Gain")
{
    field(DISA, "1")
}
record(ai, "$(P)$(R)Gain_RBV")
{
    field(DISA, "1")
}
